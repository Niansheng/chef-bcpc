# USAGE:
# - specify the nodes to be rebooted via -e target=blah, where
#   blah is a hosts pattern (start with ~, e.g. "~blah" for 
#   a regex pattern)
# - specify a particular head node to use to execute the
#   Ceph/nova management commands (strictly speaking it does
#   not have to be a head node, but it must have access to Ceph
#   and have /root/adminrc present with admin credentials)
---
- include: ../common_playbooks/validate_environment.yml

- hosts: bootstraps
  gather_facts: no
  vars_prompt:
    - name: "reboot_confirm"
      prompt: "Please type YES to confirm you want to reboot nodes"
      default: "no"
      private: no
  tasks:
  - fail: msg="Acknowledgement not received, exiting"
    when: reboot_confirm != "YES"
    tags:
      - always

- hosts: "{{ control_headnode }}"
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - name: Set noout
      command: ceph osd set noout

- hosts: "{{ target }}"
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - name: Get running instances on hypervisor
      command: virsh list --state-running --uuid
      register: running_instances_raw
      tags:
        - stopstart

    - name: Render instance list into fact
      set_fact: running_instances="{{ running_instances_raw.stdout.split('\n') }}"
      tags:
        - stopstart

    - name: Get hosts in general compute aggregate
      shell: ". /root/adminrc && nova aggregate-details general_compute"
      register: general_compute_agg
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

    - name: Get hosts in ephemeral compute aggregate
      shell: ". /root/adminrc && nova aggregate-details ephemeral_compute"
      register: ephemeral_compute_agg
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

    - name: Remove node from general compute aggregate
      shell: ". /root/adminrc && nova aggregate-remove-host general_compute {{ inventory_hostname }}"
      when: general_compute_agg.stdout | search("{{ inventory_hostname }}")
      register: general_compute_agg_remove
      failed_when: general_compute_agg_remove.rc != 0 and "404" not in general_compute_agg_remove.stderr
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

    - name: Remove node from ephemeral compute aggregate
      shell: ". /root/adminrc && nova aggregate-remove-host ephemeral_compute {{ inventory_hostname }}"
      when: ephemeral_compute_agg.stdout | search("{{ inventory_hostname }}")
      register: ephemeral_compute_agg_remove 
      failed_when: ephemeral_compute_agg_remove.rc != 0 and "404" not in ephemeral_compute_agg_remove.stderr
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

    - name: nova stop running instances on hypervisor
      shell: ". /root/adminrc && nova stop {{ item }} && sleep 2"
      with_items: running_instances
      when: item != ""
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

    - name: Verify instances are stopped
      shell: ". /root/adminrc && nova show {{ item }} | grep vm_state | grep -q -v active"
      register: instance_stopped
      until: instance_stopped.rc == 0
      ignore_errors: true
      retries: 10
      delay: 3
      with_items: running_instances
      when: item != ""
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

    - name: Reboot hypervisor
      command: /sbin/reboot
      async: false
      poll: false
      ignore_errors: true

    - name: Wait for hypervisor to come back online
      become: no
      local_action: wait_for host={{ ansible_ssh_host }} port=22 state=started timeout=1200

    - name: Wait 30 seconds for Nova to become available
      command: sleep 30

    - name: nova start instances on hypervisor
      shell: ". /root/adminrc && nova start {{ item }} && sleep 2"
      with_items: running_instances
      delegate_to: "{{ control_headnode }}"
      when: "{{ restart_instances | default(True) }} and item != ''"
      ignore_errors: true
      tags:
        - stopstart

    - name: Add node back to general compute aggregate
      shell: ". /root/adminrc && nova aggregate-add-host general_compute {{ inventory_hostname }}"
      when: general_compute_agg.stdout | search("{{ inventory_hostname }}")
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

    - name: Add node back to ephemeral compute aggregate
      shell: ". /root/adminrc && nova aggregate-add-host ephemeral_compute {{ inventory_hostname }}"
      when: ephemeral_compute_agg.stdout | search("{{ inventory_hostname }}")
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

- hosts: "{{ target }}"
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - name: Restart OpenStack services
      command: /usr/local/bin/hup_openstack

    - name: Wait 30 seconds for OpenStack services to settle
      command: sleep 30

- hosts: "{{ control_headnode }}"
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - name: Unset noout
      command: ceph osd unset noout

