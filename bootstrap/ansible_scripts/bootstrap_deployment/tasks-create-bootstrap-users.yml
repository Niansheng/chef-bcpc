---
- set_fact:
    ubuntu_password_path: /root/UBUNTU_PASSWORD

- name: Test if strong password has already been saved on filesystem
  stat: path={{ ubuntu_password_path }}
  register: ubuntu_password_stat

- name: Generate strong password for ubuntu user
  command: openssl rand -base64 24
  register: ubuntu_passwd
  when: not ubuntu_password_stat.stat.exists

- debug: msg="Writing password to {{ ubuntu_password_path }}"

- name: Write strong password to filesystem at (SAVE THIS PASSWORD SOMEWHERE)
  copy: content={{ ubuntu_passwd.stdout }} dest={{ ubuntu_password_path }}
  when: not ubuntu_password_stat.stat.exists

# test again here so that the password will be read from the new file if
# it was just generated by the above steps (below steps would not execute
# because the first stat would say the file still doesn't exist)
- name: Test again for strong password
  stat: path={{ ubuntu_password_path }}
  register: ubuntu_password_again_stat

# since the salt is not saved anywhere this is regenerated each time
# (did not feel it was a really high priority to fix)
- name: Generate crypted value from strong password
  shell: cat {{ ubuntu_password_path }} | mkpasswd -s --method=SHA-512
  register: ubuntu_passwd_crypt
  when: ubuntu_password_again_stat.stat.exists

# this converges every time because the encrypted password changes
- name: Ensure ubuntu user is present with strong password
  user: name=ubuntu shell=/bin/bash createhome=yes groups=sudo password={{ ubuntu_passwd_crypt.stdout }}

- name: Set up allowed users
  user: name={{ item.username }} shell=/bin/bash createhome=yes groups=operators
  with_items: allowed_users
  when: allowed_users is defined

- name: Add SSH keys for allowed users
  authorized_key: user={{ item.username }} key="{{ item.public_key }}"
  with_items: allowed_users
  when: allowed_users is defined

- name: Remove revoked users
  user: name={{ item.username }} state=absent remove=yes
  with_items: revoked_users
  when: revoked_users is defined

- name: Set up operations environment
  template: src=templates/bashrc.operators.j2 dest=/home/{{ item.username }}/.bashrc owner={{ item.username }} group={{ item.username }} mode=0770
  with_items: allowed_users
  when: allowed_users is defined

- name: Install scary motd banner
  template: src=templates/mod.tail.operations.j2 dest=/etc/motd.tail owner=root group=root mode=664
