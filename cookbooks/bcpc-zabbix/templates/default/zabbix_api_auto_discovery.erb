#!/usr/bin/env python

import requests
import json

headers = {'content-type': 'application/json'}
zabbix_url = 'http://<%= node['bcpc']['management']['ip'] %>:7777/api_jsonrpc.php'

login_api = {
    "jsonrpc": "2.0", "method": "user.login",
    "params": {
        "user": "<%=get_config('zabbix-admin-user')%>",
        "password": "<%=get_config('zabbix-admin-password')%>"
    },
    "id": 1 }

status = requests.post(zabbix_url, data=json.dumps(login_api), verify=False, headers=headers)
api_login = status.json()['result']

# Create discovery rules
for drule in <%=node['bcpc']['zabbix']['discovery']['ip_ranges']%>:
    drule_exists_api = {
        "jsonrpc": "2.0",
        "method": "drule.exists",
        "params": {
            "name": drule
        },
        "auth": api_login,
        "id": 1
    }

    response = requests.post(zabbix_url, data=json.dumps(drule_exists_api), verify=False, headers=headers)
    if not response.json()['result']:
        drule_create_api = {
            "jsonrpc": "2.0",
            "method": "drule.create",
            "params": {
                "name": drule,
                "iprange": drule,
                "delay": <%=node['bcpc']['zabbix']['discovery']['delay']%>,
                "dchecks": [
                    {
                        "type": "9",
                        "key_": "system.uname",
                        "ports": "10050",
                        "uniq": "0"
                    }
                ]
            },
            "auth": api_login,
            "id": 1
        }
        status = requests.post(zabbix_url, data=json.dumps(drule_create_api), verify=False, headers=headers)
        if not status.json()['result']:
            raise Exception("Unable to create discovery rule: " + drule)

